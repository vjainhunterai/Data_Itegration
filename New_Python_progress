import sys

def update_progress(progress):
    bar_length = 50
    block = int(round(bar_length*progress))
    text = "\rProgress: [{0}] {1:.1f}%".format( "#"*block + "-"*(bar_length-block), progress*100)
    sys.stdout.write(text)
    sys.stdout.flush()

# Call the update_progress() function to update the progress bar
update_progress(0.5) # Replace with your desired progress value


Start your instance from aws and run these WinRm commands via the command line.
winrm quickconfig
winrm set winrm/config/client '@{AllowUnencrypted="true"}'
winrm set winrm/config/service '@{AllowUnencrypted="true"}'
winrm set winrm/config/client/Auth '@{Basic="true"}'
winrm set winrm/config/service/auth '@{Basic="true"}'
winrm set winrm/config/winrs '@{MaxMemoryPerShellMB="1024"}'
then save the image of this instance (aws ui -> ec2 -> select the instance -> actions -> images and templates -> create an image) and use it for your jenkins slave.

Put these commands in section "User Data" that you will find in the configurations of your jenkins agent (Jenkins UI -> Build Executor Status -> Configure Clouds).
<powershell>
winrm quickconfig
winrm set winrm/config/client '@{AllowUnencrypted="true"}'
winrm set winrm/config/service '@{AllowUnencrypted="true"}'
winrm set winrm/config/client/Auth '@{Basic="true"}'
winrm set winrm/config/service/auth '@{Basic="true"}'
winrm set winrm/config/winrs '@{MaxMemoryPerShellMB="1024"}'
</powershell>


winrm set winrm/config/client @{TrustedHosts="IP_address_or_hostname"}"



hudson.plugins.ec2.win.WinConnection pingFailingIfSSHHandShakeError
Failed to verify connectivity to Windows agent
java.net.SocketTimeoutException: Connect timed out
	at java.base/sun.nio.ch.NioSocketImpl.timedFinishConnect(NioSocketImpl.java:546)
	at java.base/sun.nio.ch.NioSocketImpl.connect(NioSocketImpl.java:597)
	at java.base/java.net.Socket.connect(Socket.java:633)
	at com.hierynomus.protocol.commons.socket.ProxySocketFactory.createSocket(ProxySocketFactory.java:87)
	at com.hierynomus.protocol.commons.socket.ProxySocketFactory.createSocket(ProxySocketFactory.java:63)
	at com.hierynomus.smbj.transport.tcp.direct.DirectTcpTransport.connect(DirectTcpTransport.java:88)
	at com.hierynomus.smbj.connection.Connection.connect(Connection.java:139)
	at com.hierynomus.smbj.SMBClient.getEstablishedOrConnect(SMBClient.java:96)
	at com.hierynomus.smbj.SMBClient.connect(SMBClient.java:71)
	at hudson.plugins.ec2.win.WinConnection.pingFailingIfSSHHandShakeError(WinConnection.java:135)
	at hudson.plugins.ec2.win.EC2WindowsLauncher.connectToWinRM(EC2WindowsLauncher.java:190)
	at hudson.plugins.ec2.win.EC2WindowsLauncher.launchScript(EC2WindowsLauncher.java:52)
	at hudson.plugins.ec2.EC2ComputerLauncher.launch(EC2ComputerLauncher.java:48)
	at hudson.slaves.SlaveComputer.lambda$_connect$0(SlaveComputer.java:298)
	at jenkins.util.ContextResettingExecutorService$2.call(ContextResettingExecutorService.java:46)
	at jenkins.security.ImpersonatingExecutorService$2.call(ImpersonatingExecutorService.java:80)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
	
	
	
	---------------------------------
	
	
	# content of conftest.py

def pytest_addoption(parser):
    parser.addoption("--url", action="store", default="http://localhost:5000",
                     help="Specify the URL of the web application under test")
    parser.addoption("--headless", action="store_true", default=False,
                     help="Run tests in headless mode (no GUI)")



# content of conftest.py

import pytest
from selenium import webdriver

@pytest.fixture
def browser(request):
    url = request.config.getoption("--url")
    headless = request.config.getoption("--headless")
    
    options = webdriver.ChromeOptions()
    if headless:
        options.add_argument("--headless")
    
    driver = webdriver.Chrome(options=options)
    driver.get(url)
    
    yield driver
    
    driver.quit()


# content of test_example.py

def test_example(browser):
    # Use the browser fixture to interact with the web application under test
    ...


pytest --url http://example.com --headless test_example.py





