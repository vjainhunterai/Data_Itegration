import sys

def update_progress(progress):
    bar_length = 50
    block = int(round(bar_length*progress))
    text = "\rProgress: [{0}] {1:.1f}%".format( "#"*block + "-"*(bar_length-block), progress*100)
    sys.stdout.write(text)
    sys.stdout.flush()

# Call the update_progress() function to update the progress bar
update_progress(0.5) # Replace with your desired progress value


Start your instance from aws and run these WinRm commands via the command line.
winrm quickconfig
winrm set winrm/config/client '@{AllowUnencrypted="true"}'
winrm set winrm/config/service '@{AllowUnencrypted="true"}'
winrm set winrm/config/client/Auth '@{Basic="true"}'
winrm set winrm/config/service/auth '@{Basic="true"}'
winrm set winrm/config/winrs '@{MaxMemoryPerShellMB="1024"}'
then save the image of this instance (aws ui -> ec2 -> select the instance -> actions -> images and templates -> create an image) and use it for your jenkins slave.

Put these commands in section "User Data" that you will find in the configurations of your jenkins agent (Jenkins UI -> Build Executor Status -> Configure Clouds).
<powershell>
winrm quickconfig
winrm set winrm/config/client '@{AllowUnencrypted="true"}'
winrm set winrm/config/service '@{AllowUnencrypted="true"}'
winrm set winrm/config/client/Auth '@{Basic="true"}'
winrm set winrm/config/service/auth '@{Basic="true"}'
winrm set winrm/config/winrs '@{MaxMemoryPerShellMB="1024"}'
</powershell>


winrm set winrm/config/client @{TrustedHosts="IP_address_or_hostname"}"



hudson.plugins.ec2.win.WinConnection pingFailingIfSSHHandShakeError
Failed to verify connectivity to Windows agent
java.net.SocketTimeoutException: Connect timed out
	at java.base/sun.nio.ch.NioSocketImpl.timedFinishConnect(NioSocketImpl.java:546)
	at java.base/sun.nio.ch.NioSocketImpl.connect(NioSocketImpl.java:597)
	at java.base/java.net.Socket.connect(Socket.java:633)
	at com.hierynomus.protocol.commons.socket.ProxySocketFactory.createSocket(ProxySocketFactory.java:87)
	at com.hierynomus.protocol.commons.socket.ProxySocketFactory.createSocket(ProxySocketFactory.java:63)
	at com.hierynomus.smbj.transport.tcp.direct.DirectTcpTransport.connect(DirectTcpTransport.java:88)
	at com.hierynomus.smbj.connection.Connection.connect(Connection.java:139)
	at com.hierynomus.smbj.SMBClient.getEstablishedOrConnect(SMBClient.java:96)
	at com.hierynomus.smbj.SMBClient.connect(SMBClient.java:71)
	at hudson.plugins.ec2.win.WinConnection.pingFailingIfSSHHandShakeError(WinConnection.java:135)
	at hudson.plugins.ec2.win.EC2WindowsLauncher.connectToWinRM(EC2WindowsLauncher.java:190)
	at hudson.plugins.ec2.win.EC2WindowsLauncher.launchScript(EC2WindowsLauncher.java:52)
	at hudson.plugins.ec2.EC2ComputerLauncher.launch(EC2ComputerLauncher.java:48)
	at hudson.slaves.SlaveComputer.lambda$_connect$0(SlaveComputer.java:298)
	at jenkins.util.ContextResettingExecutorService$2.call(ContextResettingExecutorService.java:46)
	at jenkins.security.ImpersonatingExecutorService$2.call(ImpersonatingExecutorService.java:80)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1136)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:635)
	at java.base/java.lang.Thread.run(Thread.java:833)
	
	
	
	---------------------------------
	
	
	# content of conftest.py

def pytest_addoption(parser):
    parser.addoption("--url", action="store", default="http://localhost:5000",
                     help="Specify the URL of the web application under test")
    parser.addoption("--headless", action="store_true", default=False,
                     help="Run tests in headless mode (no GUI)")



# content of conftest.py

import pytest
from selenium import webdriver

@pytest.fixture
def browser(request):
    url = request.config.getoption("--url")
    headless = request.config.getoption("--headless")
    
    options = webdriver.ChromeOptions()
    if headless:
        options.add_argument("--headless")
    
    driver = webdriver.Chrome(options=options)
    driver.get(url)
    
    yield driver
    
    driver.quit()


# content of test_example.py

def test_example(browser):
    # Use the browser fixture to interact with the web application under test
    ...


pytest --url http://example.com --headless test_example.py


------------------



# content of conftest.py

def pytest_addoption(parser):
    parser.addoption("--test-name", action="store",
                     help="Specify the name of the test to run")

@pytest.fixture(scope="session")
def test_name(request):
    name = request.config.getoption("--test-name")
    return name


--------


# content of test_example.py

def test_one(test_name):
    if test_name is None or test_name == "test_one":
        assert True
    else:
        assert False

def test_two(test_name):
    if test_name is None or test_name == "test_two":
        assert True
    else:
        assert False


-------------

pytest --test-name test_one test_example.py


--------------------------------------------------------------


DELIMITER $$

CREATE FUNCTION caesar_cipher(input_text VARCHAR(255), shift INT) RETURNS VARCHAR(255)
BEGIN
    DECLARE output_text VARCHAR(255);
    SET output_text = '';
    SET shift = shift % 26;
    IF shift < 0 THEN SET shift = shift + 26; END IF;
    SET output_text = CONCAT(output_text, CHAR((ASCII(input_text) - 65 + shift) % 26 + 65));
    RETURN output_text;
END$$

DELIMITER ;



SELECT caesar_cipher('HELLO', 3); -- returns 'KHOOR'


-----------------------------------------------------------------------------------------------------

DELIMITER $$

CREATE FUNCTION caesar_cipher(input_text VARCHAR(255), shift INT) RETURNS VARCHAR(255)
BEGIN
    DECLARE output_text VARCHAR(255);
    DECLARE i INT DEFAULT 1;
    SET output_text = '';
    SET shift = shift % 26;
    IF shift < 0 THEN SET shift = shift + 26; END IF;
    WHILE i <= LENGTH(input_text) DO
        SET output_text = CONCAT(output_text, CHAR((ASCII(SUBSTRING(input_text, i, 1)) - 65 + shift) % 26 + 65));
        SET i = i + 1;
    END WHILE;
    RETURN output_text;
END$$

DELIMITER ;


DELIMITER $$

CREATE FUNCTION caesar_cipher(input_text VARCHAR(255), shift INT, mode VARCHAR(10)) RETURNS VARCHAR(255)
BEGIN
    DECLARE output_text VARCHAR(255);
    DECLARE i INT DEFAULT 1;
    SET output_text = '';
    SET shift = shift % 26;
    IF shift < 0 THEN SET shift = shift + 26; END IF;
    IF mode = 'encrypt' THEN
        WHILE i <= LENGTH(input_text) DO
            SET output_text = CONCAT(output_text, CHAR((ASCII(SUBSTRING(input_text, i, 1)) - 65 + shift) % 26 + 65));
            SET i = i + 1;
        END WHILE;
    ELSEIF mode = 'decrypt' THEN
        WHILE i <= LENGTH(input_text) DO
            SET output_text = CONCAT(output_text, CHAR((ASCII(SUBSTRING(input_text, i, 1)) - 65 - shift + 26) % 26 + 65));
            SET i = i + 1;
        END WHILE;
    ELSE
        SET output_text = 'Invalid mode. Valid modes are "encrypt" and "decrypt".';
    END IF;
    RETURN output_text;
END$$

DELIMITER ;


SELECT caesar_cipher('HELLO', 3, 'encrypt'); -- returns 'KHOOR'


SELECT caesar_cipher('KHOOR', 3, 'decrypt'); -- returns 'HELLO'


-----------------------

DELIMITER $$

CREATE FUNCTION caesar_cipher(input_text VARCHAR(255), key VARCHAR(255), mode VARCHAR(10)) RETURNS VARCHAR(255)
BEGIN
    DECLARE output_text VARCHAR(255);
    DECLARE i INT DEFAULT 1;
    DECLARE key_length INT;
    DECLARE shift INT;
    SET output_text = '';
    SET key_length = LENGTH(key);
    
    IF mode = 'encrypt' THEN
        WHILE i <= LENGTH(input_text) DO
            SET shift = ASCII(SUBSTRING(key, i % key_length + 1, 1)) - 65;
            SET output_text = CONCAT(output_text, CHAR((ASCII(SUBSTRING(input_text, i, 1)) - 65 + shift) % 26 + 65));
            SET i = i + 1;
        END WHILE;
    ELSEIF mode = 'decrypt' THEN
        WHILE i <= LENGTH(input_text) DO
            SET shift = ASCII(SUBSTRING(key, i % key_length + 1, 1)) - 65;
            SET output_text = CONCAT(output_text, CHAR((ASCII(SUBSTRING(input_text, i, 1)) - 65 - shift + 26) % 26 + 65));
            SET i = i + 1;
        END WHILE;
    ELSE
        SET output_text = 'Invalid mode. Valid modes are "encrypt" and "decrypt".';
    END IF;

    RETURN output_text;
END$$

DELIMITER ;


DELIMITER $$

CREATE FUNCTION caesar_cipher(input_text VARCHAR(255), shift INT, mode VARCHAR(10)) RETURNS VARCHAR(255)
BEGIN
    DECLARE output_text VARCHAR(255);
    DECLARE i INT DEFAULT 1;
    SET output_text = '';

    IF mode = 'encrypt' THEN
        WHILE i <= LENGTH(input_text) DO
            SET output_text = CONCAT(output_text, CHAR((ASCII(SUBSTRING(input_text, i, 1)) - 65 + shift) % 26 + 65));
            SET i = i + 1;
        END WHILE;
    ELSEIF mode = 'decrypt' THEN
        WHILE i <= LENGTH(input_text) DO
            SET output_text = CONCAT(output_text, CHAR((ASCII(SUBSTRING(input_text, i, 1)) - 65 - shift + 26) % 26 + 65));
            SET i = i + 1;
        END WHILE;
    ELSE
        SET output_text = 'Invalid mode. Valid modes are "encrypt" and "decrypt".';
    END IF;

    RETURN output_text;
END$$

DELIMITER ;


DELIMITER $$

CREATE FUNCTION caesar_cipher(input_text VARCHAR(255), key VARCHAR(255), mode VARCHAR(10)) RETURNS VARCHAR(255)
BEGIN
    DECLARE output_text VARCHAR(255);
    DECLARE i INT DEFAULT 1;
    DECLARE key_length INT;
    DECLARE shift INT;
    SET output_text = '';
    SET key_length = LENGTH(key);
    
    IF mode = 'encrypt' THEN
        WHILE i <= LENGTH(input_text) DO
            SET shift = CAST(ASCII(SUBSTRING(key, i % key_length + 1, 1)) AS SIGNED) - 65;
            SET output_text = CONCAT(output_text, CHAR((ASCII(SUBSTRING(input_text, i, 1)) - 65 + shift) % 26 + 65));
            SET i = i + 1;
        END WHILE;
    ELSEIF mode = 'decrypt' THEN
        WHILE i <= LENGTH(input_text) DO
            SET shift = CAST(ASCII(SUBSTRING(key, i % key_length + 1, 1)) AS SIGNED) - 65;
            SET output_text = CONCAT(output_text, CHAR((ASCII(SUBSTRING(input_text, i, 1)) - 65 - shift + 26) % 26 + 65));
            SET i = i + 1;
        END WHILE;
    ELSE
        SET output_text = 'Invalid mode. Valid modes are "encrypt" and "decrypt".';
    END IF;

    RETURN output_text;
END$$

DELIMITER ;

-----encryption key ----
debd62a389f58a


create table User_Authorization_test(
id int auto_increment primary key,
email varchar(50) not null,
auth_system_key varchar(50) not null,
user_action varchar(10) not null,
permission varchar(1) default '0',
resource text,
enabled varchar(1) default '1',
created_on timestamp default current_timestamp,
updated_on timestamp,
created_by varchar(50),
updated_by varchar(50)
);


create table User_Auth_System_key_test(
id int auto_increment primary key,
app_system varchar(50) not null,
auth_system_key varchar(50) not null,
enabled varchar(1) default '1',
created_on timestamp default current_timestamp,
updated_on timestamp,
created_by varchar(50),
updated_by varchar(50)
);


------------------------

Use the BINARY data type instead of VARCHAR for the input, key, and output parameters. 
This can improve performance by reducing the amount of character set conversion that needs to be done.

Use the CHAR_LENGTH() function instead of the LENGTH() function to get the length of the input and key strings.
The CHAR_LENGTH() function is faster than the LENGTH() function because it counts the number of characters in the string, not the number of bytes.

Use a stored procedure instead of a function. Stored procedures can be faster than functions because they are precompiled and cached in memory, 
whereas functions are compiled and executed every time they are called.

Use prepared statements to execute the SQL code. Prepared statements can improve performance by reducing the amount of parsing and optimization
that needs to be done by the MySQL server.

Consider using a different encryption algorithm that is better suited for use in a database environment, such as AES encryption.


---------------------















